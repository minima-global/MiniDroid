
Minima transactions are a series of inputs, a series of outputs and a variable list known as the state, which you can access from the script with STATE. The state can be accessed by all the input scripts, and is stored in the MMR database, so can be accessed by PREVSTATE in the next transaction the outputs are added to, as inputs. 

The sum of the outputs must be less than or equal to the sum of the inputs, for every tokenid used. The difference in raw minima is the Burn. 

A Minima input script returns TRUE or FALSE. The default is return FALSE, so all inputs must explicitly RETURN TRUE for the transaction to be valid.

A transaction can be signed, in full, by one or more public keys.

Minima allows input scripts to have perfect knowledge of the entire transaction. How many, token type, amount and the address of all inputs and outputs are available. An input knows it's own script ( @SCRIPT ) and can ensure an output of a similar address exists in the outputs. 

A script can run for 512 instructions. An instruction is 1 operation or function.

The addition of the state variables in the MMR Proof DB, allow for complex scripts with knowledge of their past to be created. A simple state mechanic for transactional history rather than a global state for ALL transactions.

Minima tracks all coins that are to an address you possess and all coins that have a public key or address you possess in the STATE or PREVSTATE.

Minima transactions are scriptable Logic Gates, with analogue inputs and outputs, a simple yet powerful control language, and a previous history state mechanic.

I think of them as Script Gates.

Grammar
-------

ADDRESS     ::= SHA3 ( BLOCK )
BLOCK       ::= STATEMENT_1 STATEMENT_2 ... STATEMENT_n
STATEMENT   ::= LET VARIABLE = EXPRESSION |
                LET ( EXPRESSION_1 EXPRESSION_2 ... EXPRESSION_n ) = EXPRESSION |
                IF EXPRESSION THEN BLOCK [ELSEIF EXPRESSION THEN BLOCK]* [ELSE BLOCK] ENDIF | 
                WHILE EXPRESSION DO BLOCK ENDWHILE |
                EXEC EXPRESSION |
                MAST EXPRESSION |
                ASSERT EXPRESSION |
                RETURN EXPRESSION
EXPRESSION  ::= RELATION AND RELATION  | RELATION OR RELATION  |  
                RELATION XOR RELATION  | RELATION NAND RELATION | 
                RELATION NOR RELATION  |  RELATION NXOR RELATION | RELATION
RELATION    ::= LOGIC EQ LOGIC  | LOGIC NEQ LOGIC  | 
                LOGIC GT LOGIC  | LOGIC GTE LOGIC  | 
                LOGIC LT LOGIC  | LOGIC LTE LOGIC  | LOGIC
LOGIC       ::= LOGIC & OPERATION | LOGIC | OPERATION | 
                LOGIC ^ OPERATION | OPERATION
OPERATION   ::= OPERATION + MULDIV | OPERATION - MULDIV | 
                OPERATION % MULDIV | 
                OPERATION << MULDIV | OPERATION >> MULDIV | MULDIV
MULDIV      ::= MULDIV * PRIME | MULDIV / PRIME | PRIME
PRIME       ::= NOT PRIME |  NEG PRIME | BASEUNIT
BASEUNIT    ::= VARIABLE | VALUE | GLOBAL | FUNCTION | ( EXPRESSION )
VARIABLE    ::= ^[a-z]{1,16}$
VALUE       ::= NUMBER | BYTE | HEX | SCRIPT | BINARY
NUMBER      ::= ^-?\\d*(\\.\\d+)?$
BYTE        ::= [0-255]
HEX         ::= 0x[0-9A-F]{2}*
SCRIPT      ::= [ ASCII ]
BINARY      ::= TRUE | FALSE
FALSE       ::= 0
TRUE        ::= NOT FALSE
GLOBAL      ::= @BLKNUM | @INPUT | @INBLKNUM | @BLKDIFF
      	        @AMOUNT | @ADDRESS | @TOKENID | @COINID |
                @SCRIPT | @TOTIN | @TOTOUT
FUNCTION    ::= FUNC ( EXPRESSION_1 EXPRESSION_2 .. EXPRESSION_n ) 
FUNC        ::= HEXCAT | STRCAT | LEN | REV | SUBSET | RPLVAR | GET |
                ASCII | BOOL | HEX | NUMBER | SCRIPT |
                ABS | CEIL | FLOOR | MIN | MAX | INC | DEC | SIGDIG | POW |
                BITSET | BITGET | PROOF | SHA3 | SHA2 |
                SIGNEDBY | MULTISIG | CHECKSIG |
                GETOUTADDR | GETOUTAMT | GETOUTTOK | VERIFYOUT |
                GETINADDR | GETINAMT | GETINTOK | GETINID | VERIFYIN |
                STATE | PREVSTATE | SAMESTATE | DYNSTATE

Globals
-------

@BLKNUM      : Block number this transaction is in
@BLKTIME     : Block time in seconds from Jan 01 1970
@INBLKNUM    : Block number when this output was created
@BLKDIFF     : Difference between BLKNUM and INBLKNUM
@INPUT       : Input number in the transaction
@AMOUNT      : Amount of this input
@ADDRESS     : Address of this input
@TOKENID     : TokenID of this input
@COINID      : CoinID of this input
@SCRIPT      : Script for this input
@TOKENSCRIPT : Script for this input
@TOTIN       : Total number of inputs for this transaction
@TOTOUT      : Total number of outputs for this transaction

Functions
---------

HEXCAT ( HEX_1 HEX_2 ... HEX_n )
Concatenate the values. All values are treated as HEX values 

STRCAT ( SCRIPT_1 SCRIPT_2 ... SCRIPT_n )
Concatenate the values. All values are treated as SCRIPT values. 
A space is added between each and then the script is CLEANED. 

LEN ( HEX )
Length of the data

REV ( HEX )
Reverse the data

SUBSET ( HEX NUMBER NUMBER )
Return the HEX subset of the data - start - length

RPLVAR ( SCRIPT SCRIPT SCRIPT ) 
In a script, replace a variable definition with the following Expression. Can be used with @SCRIPT for recursive covenants.

GET ( NUMBER NUMBER .. NUMBER )
Return the array value set with LET ( EXPRESSION EXPRESSION .. EXPRESSION )  

ASCII ( HEX )
Convert the HEX value of a script value to a script

BOOL ( VALUE )
Convert to TRUE or FALSE value

HEX ( SCRIPT )
Convert SCRIPT to HEX

NUMBER ( HEX )
Convert HEX to NUMBER

SCRIPT ( HEX ) 
Convert a HEX value to SCRIPT

ABS ( NUMBER )
Return the absolute value of a number

CEIL ( NUMBER )
Return the number rounded up

FLOOR ( NUMBER ) 
Return the number rounded down

MIN ( NUMBER NUMBER )
Return the minimum value of the 2 numbers

MAX ( NUMBER NUMBER )
Return the maximum value of the 2 numbers

INC ( NUMBER )
Increment a number

DEC ( NUMBER )
Decrement a number

POW ( NUMBER NUMBER )
Returns the power of N of a number. N must be a whole number.

SIGDIG ( NUMBER NUMBER )
Set the significant digits of the number

BITSET ( HEX NUMBER BINARY )
Set the value of the BIT at that Position to 0 or 1

BITGET ( HEX NUMBER ) 
Get the BINARY value of the bit at the position.

CHAINSHA ( HEX HEX ) 
Recursively SHA3 hash the first HEX value with the merkle proof provided in the second. Returns the final result that can be checked in script. Use the 'chainsha' function in Minima to construct Hash Trees proofs for MAST and Signature Public Keys.   

SHA3 ( NUMBER HEX ) 
Returns the SHA3 value of bitlength NUMBER of the HEX value. The SHA3 bitlength can be 160, 256 or 512.

SHA2 ( HEX ) 
Returns the SHA2 value of the HEX value. 256 bits.

SIGNEDBY ( HEX )
Returns true if the transaction is signed by this public key

MULTISIG ( BYTE HEX1 HEX2 .. HEXn )
Returns true if the transaction is signed by N of the public keys

CHECKSIG ( HEX HEX HEX)
Check public key, data and signature 

GETOUTADDR ( BYTE ) 
Return the HEX address of the specified output

GETOUTAMT ( BYTE ) 
Return the amount of the specified output 

GETOUTTOK ( BYTE ) 
Return the token id of the specified output

VERIFYOUT ( BYTE HEX NUMBER HEX [NUMBER])
Verify the specified output has the specified address, amount and tokenid. Optional 4th parameter relates to AMOUNT. -1 LTE, 0 EQ, 1 GTE. Default EQ.

GETINADDR ( BYTE ) 
Return the HEX address of the specified input

GETINAMT ( BYTE ) 
Return the amount of the specified input

GETINTOK ( BYTE ) 
Return the token id of the specified input

VERIFYIN ( BYTE HEX NUMBER HEX [NUMBER])
Verify the specified input has the specified address, amount and tokenid. Optional 4th parameter relates to AMOUNT. -1 LTE, 0 EQ, 1 GTE. Default EQ.

STATE ( BYTE )
Return the state value for the given number

PREVSTATE ( BYTE )
Return the state value stored in the MMR data in the initial transaction this input was created. Allows for a state to be maintained from 1 spend to the next

SAMESTATE ( BYTE [BYTE] )
Return TRUE if the previous state and current state are the same. If 2 parameters are set then checks all the values inbetween the 2 values inclusively

DYNSTATE ( BYTE EXPRESSION )
Dynamically set the state value. You can only use this ONCE per state per transaction. MUST be used before STATE or SAMESTATE.

Examples
--------

LET thing = 23
LET ( 12 2 ) = 45.345
LET ( 0 0 1 ) = 0xFF
LET ( 0xFF ( thing + 1 ) ) = [ RETURN TRUE ]

--

RETURN SIGNEDBY ( 0x12345.. )

--

IF SIGNEDBY ( 0x123456.. ) AND SIGNEDBY ( 0x987654.. ) THEN
   RETURN TRUE
ELSE IF @BLKNUM GT 198765 AND SIGNEDBY ( 0x12345.. ) THEN
   RETURN TRUE
ENDIF

--

LET x = STATE ( 23 )
LET shax = SHA3 ( x )
IF shax EQ 0x6785456.. AND SIGNEDBY ( 0x12345.. ) THEN 
  RETURN TRUE 
ENDIF

--

EXEC [ RETURN TRUE ]

--

MAST 0xA6657D2133E29B0A343871CAE44224BBA6BB87A972A5247A38A45D3D2065F7E4

--

LET old = [ LET add = 0xFFEEDDFFEEDD ]
LET new = RPLVAR ( old [ add ] [ 0xEE ]] )

--

ASSERT STATE ( 0 ) EQ INC ( PREVSTATE ( 0 ) )

--
