package org.minima.system.input.functions;

import org.minima.system.input.CommandFunction;

public class tutorial extends CommandFunction{

	public static String TUTORIAL_TEXT = "\r\n"
			+ "Minima transactions are a series of inputs, a series of outputs and a variable list known as the state, which you can access from the script with STATE. The state can be accessed by all the input scripts, and is stored in the MMR database, so can be accessed by PREVSTATE in the next transaction the outputs are added to, as inputs. \r\n"
			+ "\r\n"
			+ "The sum of the outputs must be less than or equal to the sum of the inputs, for every tokenid used. The difference in raw minima is the Burn. \r\n"
			+ "\r\n"
			+ "A Minima input script returns TRUE or FALSE. The default is return FALSE, so all inputs must explicitly RETURN TRUE for the transaction to be valid.\r\n"
			+ "\r\n"
			+ "A transaction can be signed, in full, by one or more public keys.\r\n"
			+ "\r\n"
			+ "Minima allows input scripts to have perfect knowledge of the entire transaction. How many, token type, amount and the address of all inputs and outputs are available. An input knows it's own script ( @SCRIPT ) and can ensure an output of a similar address exists in the outputs. \r\n"
			+ "\r\n"
			+ "A script can run for 512 instructions. An instruction is 1 operation or function.\r\n"
			+ "\r\n"
			+ "The addition of the state variables in the MMR Proof DB, allow for complex scripts with knowledge of their past to be created. A simple state mechanic for transactional history rather than a global state for ALL transactions.\r\n"
			+ "\r\n"
			+ "Minima tracks all coins that are to an address you possess and all coins that have a public key or address you possess in the STATE or PREVSTATE.\r\n"
			+ "\r\n"
			+ "Minima transactions are scriptable Logic Gates, with analogue inputs and outputs, a simple yet powerful control language, and a previous history state mechanic.\r\n"
			+ "\r\n"
			+ "I think of them as Script Gates.\r\n"
			+ "\r\n"
			+ "Grammar\r\n"
			+ "-------\r\n"
			+ "\r\n"
			+ "ADDRESS     ::= SHA3 ( BLOCK )\r\n"
			+ "BLOCK       ::= STATEMENT_1 STATEMENT_2 ... STATEMENT_n\r\n"
			+ "STATEMENT   ::= LET VARIABLE = EXPRESSION |\r\n"
			+ "                LET ( EXPRESSION_1 EXPRESSION_2 ... EXPRESSION_n ) = EXPRESSION |\r\n"
			+ "                IF EXPRESSION THEN BLOCK [ELSEIF EXPRESSION THEN BLOCK]* [ELSE BLOCK] ENDIF | \r\n"
			+ "                WHILE EXPRESSION DO BLOCK ENDWHILE |\r\n"
			+ "                EXEC EXPRESSION |\r\n"
			+ "                MAST EXPRESSION |\r\n"
			+ "                ASSERT EXPRESSION |\r\n"
			+ "                RETURN EXPRESSION\r\n"
			+ "EXPRESSION  ::= RELATION AND RELATION  | RELATION OR RELATION  |  \r\n"
			+ "                RELATION XOR RELATION  | RELATION NAND RELATION | \r\n"
			+ "                RELATION NOR RELATION  |  RELATION NXOR RELATION | RELATION\r\n"
			+ "RELATION    ::= LOGIC EQ LOGIC  | LOGIC NEQ LOGIC  | \r\n"
			+ "                LOGIC GT LOGIC  | LOGIC GTE LOGIC  | \r\n"
			+ "                LOGIC LT LOGIC  | LOGIC LTE LOGIC  | LOGIC\r\n"
			+ "LOGIC       ::= LOGIC & OPERATION | LOGIC | OPERATION | \r\n"
			+ "                LOGIC ^ OPERATION | OPERATION\r\n"
			+ "OPERATION   ::= OPERATION + MULDIV | OPERATION - MULDIV | \r\n"
			+ "                OPERATION % MULDIV | \r\n"
			+ "                OPERATION << MULDIV | OPERATION >> MULDIV | MULDIV\r\n"
			+ "MULDIV      ::= MULDIV * PRIME | MULDIV / PRIME | PRIME\r\n"
			+ "PRIME       ::= NOT PRIME |  NEG PRIME | BASEUNIT\r\n"
			+ "BASEUNIT    ::= VARIABLE | VALUE | GLOBAL | FUNCTION | ( EXPRESSION )\r\n"
			+ "VARIABLE    ::= ^[a-z]{1,16}$\r\n"
			+ "VALUE       ::= NUMBER | BYTE | HEX | SCRIPT | BINARY\r\n"
			+ "NUMBER      ::= ^-?\\\\d*(\\\\.\\\\d+)?$\r\n"
			+ "BYTE        ::= [0-255]\r\n"
			+ "HEX         ::= 0x[0-9A-F]{2}*\r\n"
			+ "SCRIPT      ::= [ ASCII ]\r\n"
			+ "BINARY      ::= TRUE | FALSE\r\n"
			+ "FALSE       ::= 0\r\n"
			+ "TRUE        ::= NOT FALSE\r\n"
			+ "GLOBAL      ::= @BLKNUM | @INPUT | @INBLKNUM | @BLKDIFF\r\n"
			+ "      	        @AMOUNT | @ADDRESS | @TOKENID | @COINID |\r\n"
			+ "                @SCRIPT | @TOTIN | @TOTOUT\r\n"
			+ "FUNCTION    ::= FUNC ( EXPRESSION_1 EXPRESSION_2 .. EXPRESSION_n ) \r\n"
			+ "FUNC        ::= CONCAT | LEN | REV | SUBSET | RPLVAR | GET |\r\n"
			+ "                ASCII | BOOL | HEX | NUMBER | SCRIPT |\r\n"
			+ "                ABS | CEIL | FLOOR | MIN | MAX | INC | DEC | SIGDIG | POW |\r\n"
			+ "                BITSET | BITGET | BITCOUNT | CHAINSHA | SHA3 | SHA2 |\r\n"
			+ "                SIGNEDBY | MULTISIG | CHECKSIG |\r\n"
			+ "                GETOUTADDR | GETOUTAMT | GETOUTTOK | VERIFYOUT |\r\n"
			+ "                GETINADDR | GETINAMT | GETINTOK | GETINID | VERIFYIN |\r\n"
			+ "                STATE | PREVSTATE | SAMESTATE\r\n"
			+ "\r\n"
			+ "Globals\r\n"
			+ "-------\r\n"
			+ "\r\n"
			+ "@BLKNUM      : Block number this transaction is in\r\n"
			+ "@BLKTIME     : Block time in seconds from Jan 01 1970\r\n"
			+ "@PREVBLKHASH : Hash of the previous Block\r\n"
			+ "@INPUT       : Input number in the transaction\r\n"
			+ "@INBLKNUM    : Block number when this output was created\r\n"
			+ "@BLKDIFF     : Difference between BLKNUM and INBLKNUM\r\n"
			+ "@AMOUNT      : Amount of this input\r\n"
			+ "@ADDRESS     : Address of this input\r\n"
			+ "@TOKENID     : TokenID of this input\r\n"
			+ "@COINID      : CoinID of this input\r\n"
			+ "@SCRIPT      : Script for this input\r\n"
			+ "@TOKENSCRIPT : Script for this input\r\n"
			+ "@TOTIN       : Total number of inputs for this transaction\r\n"
			+ "@TOTOUT      : Total number of outputs for this transaction\r\n"
			+ "@FLOATING    : Is this a floating input\r\n"
			+ "\r\n"
			+ "Functions\r\n"
			+ "---------\r\n"
			+ "\r\n"
			+ "CONACT ( HEX_1 HEX_2 ... HEX_n ) | CONCAT ( SCRIPT_1 SCRIPT_2 ... SCRIPT_n )\r\n"
			+ "Concatenate the values. \r\n"
			+ "\r\n"
			+ "LEN ( HEX|SCRIPT )\r\n"
			+ "Length of the data\r\n"
			+ "\r\n"
			+ "REV ( HEX )\r\n"
			+ "Reverse the data\r\n"
			+ "\r\n"
			+ "SUBSET ( HEX|SCRIPT NUMBER NUMBER )\r\n"
			+ "Return the HEX subset of the data - start - length\r\n"
			+ "\r\n"
			+ "RPLVAR ( SCRIPT SCRIPT SCRIPT ) \r\n"
			+ "In a script, replace a variable definition with the following Expression. Can be used with @SCRIPT for recursive covenants.\r\n"
			+ "\r\n"
			+ "GET ( NUMBER NUMBER .. NUMBER )\r\n"
			+ "Return the array value set with LET ( EXPRESSION EXPRESSION .. EXPRESSION )  \r\n"
			+ "\r\n"
			+ "ASCII ( HEX )\r\n"
			+ "Convert the HEX value of a script value to a script\r\n"
			+ "\r\n"
			+ "BOOL ( VALUE )\r\n"
			+ "Convert to TRUE or FALSE value\r\n"
			+ "\r\n"
			+ "HEX ( SCRIPT )\r\n"
			+ "Convert SCRIPT to HEX\r\n"
			+ "\r\n"
			+ "NUMBER ( HEX )\r\n"
			+ "Convert HEX to NUMBER\r\n"
			+ "\r\n"
			+ "SCRIPT ( HEX ) \r\n"
			+ "Convert a HEX value to SCRIPT\r\n"
			+ "\r\n"
			+ "ABS ( NUMBER )\r\n"
			+ "Return the absolute value of a number\r\n"
			+ "\r\n"
			+ "CEIL ( NUMBER )\r\n"
			+ "Return the number rounded up\r\n"
			+ "\r\n"
			+ "FLOOR ( NUMBER ) \r\n"
			+ "Return the number rounded down\r\n"
			+ "\r\n"
			+ "MIN ( NUMBER NUMBER )\r\n"
			+ "Return the minimum value of the 2 numbers\r\n"
			+ "\r\n"
			+ "MAX ( NUMBER NUMBER )\r\n"
			+ "Return the maximum value of the 2 numbers\r\n"
			+ "\r\n"
			+ "INC ( NUMBER )\r\n"
			+ "Increment a number\r\n"
			+ "\r\n"
			+ "DEC ( NUMBER )\r\n"
			+ "Decrement a number\r\n"
			+ "\r\n"
			+ "POW ( NUMBER NUMBER )\r\n"
			+ "Returns the power of N of a number. N must be a whole number.\r\n"
			+ "\r\n"
			+ "SIGDIG ( NUMBER NUMBER )\r\n"
			+ "Set the significant digits of the number\r\n"
			+ "\r\n"
			+ "BITSET ( HEX NUMBER BINARY )\r\n"
			+ "Set the value of the BIT at that Position to 0 or 1\r\n"
			+ "\r\n"
			+ "BITGET ( HEX NUMBER ) \r\n"
			+ "Get the BINARY value of the bit at the position.\r\n"
			+ "\r\n"
			+ "BITCOUNT ( HEX ) \r\n"
			+ "Count the number of bits set in a HEX value\r\n"
			+ "\r\n"
			+ "CHAINSHA ( HEX HEX ) \r\n"
			+ "Recursively SHA3 hash the first HEX value with the merkle proof provided in the second. Returns the final result that can be checked in script. Use the 'chainsha' function in Minima to construct Hash Trees proofs for MAST and Signature Public Keys.   \r\n"
			+ "\r\n"
			+ "SHA3 ( NUMBER HEX ) \r\n"
			+ "Returns the SHA3 value of bitlength NUMBER of the HEX value. The SHA3 bitlength can be 160, 256 or 512.\r\n"
			+ "\r\n"
			+ "SHA2 ( HEX ) \r\n"
			+ "Returns the SHA2 value of the HEX value. 256 bits.\r\n"
			+ "\r\n"
			+ "SIGNEDBY ( HEX )\r\n"
			+ "Returns true if the transaction is signed by this public key\r\n"
			+ "\r\n"
			+ "MULTISIG ( NUMBER HEX1 HEX2 .. HEXn )\r\n"
			+ "Returns true if the transaction is signed by N of the public keys\r\n"
			+ "\r\n"
			+ "CHECKSIG ( HEX HEX HEX)\r\n"
			+ "Check public key, data and signature \r\n"
			+ "\r\n"
			+ "GETOUTADDR ( NUMBER ) \r\n"
			+ "Return the HEX address of the specified output\r\n"
			+ "\r\n"
			+ "GETOUTAMT ( NUMBER ) \r\n"
			+ "Return the amount of the specified output \r\n"
			+ "\r\n"
			+ "GETOUTTOK ( NUMBER ) \r\n"
			+ "Return the token id of the specified output\r\n"
			+ "\r\n"
			+ "VERIFYOUT ( NUMBER HEX NUMBER HEX [NUMBER])\r\n"
			+ "Verify the specified output has the specified address, amount and tokenid. Optional 4th parameter relates to AMOUNT. -1 LTE, 0 EQ, 1 GTE. Default EQ.\r\n"
			+ "\r\n"
			+ "GETINADDR ( NUMBER ) \r\n"
			+ "Return the HEX address of the specified input\r\n"
			+ "\r\n"
			+ "GETINAMT ( NUMBER ) \r\n"
			+ "Return the amount of the specified input\r\n"
			+ "\r\n"
			+ "GETINTOK ( NUMBER ) \r\n"
			+ "Return the token id of the specified input\r\n"
			+ "\r\n"
			+ "VERIFYIN ( NUMBER HEX NUMBER HEX [NUMBER])\r\n"
			+ "Verify the specified input has the specified address, amount and tokenid. Optional 4th parameter relates to AMOUNT. -1 LTE, 0 EQ, 1 GTE. Default EQ.\r\n"
			+ "\r\n"
			+ "STATE ( NUMBER )\r\n"
			+ "Return the state value for the given number\r\n"
			+ "\r\n"
			+ "PREVSTATE ( NUMBER )\r\n"
			+ "Return the state value stored in the MMR data in the initial transaction this input was created. Allows for a state to be maintained from 1 spend to the next\r\n"
			+ "\r\n"
			+ "SAMESTATE ( NUMBER [NUMBER] )\r\n"
			+ "Return TRUE if the previous state and current state are the same. If 2 parameters are set then checks all the values inbetween the 2 values inclusively\r\n"
			+ "\r\n"
			+ "Examples\r\n"
			+ "--------\r\n"
			+ "\r\n"
			+ "LET thing = 23\r\n"
			+ "LET ( 12 2 ) = 45.345\r\n"
			+ "LET ( 0 0 1 ) = 0xFF\r\n"
			+ "LET ( 0xFF ( thing + 1 ) ) = [ RETURN TRUE ]\r\n"
			+ "\r\n"
			+ "--\r\n"
			+ "\r\n"
			+ "RETURN SIGNEDBY ( 0x12345.. )\r\n"
			+ "\r\n"
			+ "--\r\n"
			+ "\r\n"
			+ "IF SIGNEDBY ( 0x123456.. ) AND SIGNEDBY ( 0x987654.. ) THEN\r\n"
			+ "   RETURN TRUE\r\n"
			+ "ELSE IF @BLKNUM GT 198765 AND SIGNEDBY ( 0x12345.. ) THEN\r\n"
			+ "   RETURN TRUE\r\n"
			+ "ENDIF\r\n"
			+ "\r\n"
			+ "--\r\n"
			+ "\r\n"
			+ "LET x = STATE ( 23 )\r\n"
			+ "LET shax = SHA3 ( x )\r\n"
			+ "IF shax EQ 0x6785456.. AND SIGNEDBY ( 0x12345.. ) THEN \r\n"
			+ "  RETURN TRUE \r\n"
			+ "ENDIF\r\n"
			+ "\r\n"
			+ "--\r\n"
			+ "\r\n"
			+ "EXEC [ RETURN TRUE ]\r\n"
			+ "\r\n"
			+ "--\r\n"
			+ "\r\n"
			+ "MAST 0xA6657D2133E29B0A343871CAE44224BBA6BB87A972A5247A38A45D3D2065F7E4\r\n"
			+ "\r\n"
			+ "--\r\n"
			+ "\r\n"
			+ "LET old = [ LET add = 0xFFEEDDFFEEDD ]\r\n"
			+ "LET new = RPLVAR ( old [ add ] [ 0xEE ]] )\r\n"
			+ "\r\n"
			+ "--\r\n"
			+ "\r\n"
			+ "ASSERT STATE ( 0 ) EQ INC ( PREVSTATE ( 0 ) )\r\n"
			+ "\r\n"
			+ "--\r\n"
			+ "";
	
	public tutorial() {
		super("tutorial");
		setHelp("", "Explain Minima and go through Scripting", "");
	}
	
	@Override
	public void doFunction(String[] zInput) throws Exception {
		//Just print out the Tutorial Text
		getResponseStream().getDataJSON().put("Tutorial", TUTORIAL_TEXT);
		getResponseStream().endStatus(true, "");

//		getResponseStream().hardEndStatus(TUTORIAL_TEXT);
	}
	
	@Override
	public CommandFunction getNewFunction() {
		// TODO Auto-generated method stub
		return new tutorial();
	}
}
